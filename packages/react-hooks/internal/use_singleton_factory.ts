import { useMemo } from "react";

/**
 * Memoizes and returns a singleton instance generated by a factory function for the
 * lifetime of a React component, unless `key` changes.
 *
 * This pattern is useful for creating service instances or other objects
 * whose lifetimes should be tied to the component and can be created via a factory function.
 *
 * @template TInstance The type of instance created by the factory.
 * @template TCtor The constructor type associated (if any) for inference.
 * @param factory A function that returns the instance to memoize.
 * @param key (optional) A key to control when the factory is re-invoked; changing this will create a new instance.
 * @returns A stable, memoized instance generated by the factory.
 *
 * @example
 * const myService = useSingletonFactory(() => new MyService(url), [url]);
 * myService.doSomething();
 */
export function useSingletonFactory<
  TInstance,
  TCtor extends new (...args: ConstructorParameters<TCtor>) => TInstance,
>(
  factory: () => InstanceType<TCtor>,
  key: number = 0,
): InstanceType<TCtor> {
  return useMemo(factory, [key]);
}
